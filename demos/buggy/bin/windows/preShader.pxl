// Pre shader
// This file contains code that user code must be able to use
//---------------------------------------------------------------------------------
// Common uniforms
//---------------------------------------------------------------------------------
uniform mat4 modelViewProj;
uniform vec3 viewPos; // View position in model space
varying vec2 vTex0;
varying vec3 vPos; // Vertex position
const vec3 light0Dir = normalize(vec3(0.0,1.0,0.5));

//---------------------------------------------------------------------------------
// Mathematical constants
//---------------------------------------------------------------------------------
const float pi = 3.14159;
const float e = 2.718281;

//---------------------------------------------------------------------------------
// Atmospherics
//---------------------------------------------------------------------------------
// Global constants
const float AtmosphericScale = 0.001; // Meters to kilometers
const float EarthRadius = 6730.0;
const float AtmosphericHeight = 43.0;
const vec3	invWavelen4 = {4.476,12.437,21.855};// e-12, rgb
const float g = -0.95;
const float	rayC = 0.05;	// Rayleigh scattering constant
const float mieC = 0.0025; // Mie scattering constant
const float lAbC = 10.0; // Light Absortion coefficient
const float	sunLight = 1.0; // Intensity of sun light
const int	scatteringSamples = 0;
const int	scatteringSubSamples = 0;

//------------------------------------------------------------
vec3 sunContribution(in vec2 point)
{
	// vec2 lDir = {length(light0Dir.xy), light0Dir.z};
	// float extintionExp = 0.10;// distanceToSpace(point, lDir);
	// vec3 extBeta = vec3(lAbC)+rayC*invWavelen4;
	// return vec3(pow(e, -extBeta.x*extintionExp),
	// 					pow(e, -extBeta.y*extintionExp),
	// 					pow(e, -extBeta.z*extintionExp));
	return vec3(sunLight);
}

//------------------------------------------------------------
float atmosphereHeight(vec2 pos)
{
	// Spherical atmosphere
	return sqrt(dot(pos,pos))-EarthRadius;
}

//------------------------------------------------------------
float atmosphereDensity(vec2 point)
{
	// Cuadratic density distribution
	float h = atmosphereHeight(point) / AtmosphericHeight;
	return max(h*h-2.0*h+1.0, 0.0);
}

//------------------------------------------------------------
// Note: dir is assumed unitary
float distanceToSpace(in vec2 pos, in vec2 dir)
{
	float b = dot(pos,dir);
	float rAtmos = EarthRadius + AtmosphericHeight;
	float c = dot(pos,pos)-rAtmos*rAtmos;
	return -b+sqrt(b*b-c);
}

//------------------------------------------------------------
float rayleighPhase(float cos)
{
	return (3.0/(16.0*pi))*(1.0+cos*cos);
}

//------------------------------------------------------------
float miePhase(float cos)
{
	float mieNum = (1-g);
	mieNum *= mieNum;
	float inRoot = (1+g*(g-2*cos));
	inRoot *= inRoot*inRoot;
	float mieDen = 4.0*3.14159*sqrt(inRoot);
	return mieNum/mieDen;
}

// --- End of pre-shader ---
