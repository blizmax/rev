//----------------------------------------------------------------------------------------------------------------------
// Basic shader
//----------------------------------------------------------------------------------------------------------------------
// Pixel
//varying vec3 vPos;

uniform vec2 	uResolution;
uniform vec3	uCamPos;
uniform float	uTime;
varying vec2	vUV;
uniform sampler2D uXor;

float intersect(in vec3 ro, in vec3 rd) {
	return -1.0;
}

void main (void) {
	vec2 uvRatio = vec2(1.0,uResolution.y / uResolution.x);

	vec3 ro = vec3(0.0, 0.0, 1.0);
	vec3 rd = normalize( vec3((2.0*vUV.xy - 1.0)*uvRatio, 1.0));
	
	// Ray intersection
	float id = intersect(ro, rd);
	
	vec3 color = vec3(vUV.x);
	if(id > 0.0) {
		color = vec3(1.0);
	}
	
	gl_FragColor = vec4(color, 1.0);
}