//----------------------------------------------------------------------------------------------------------------------
// Basic shader
//----------------------------------------------------------------------------------------------------------------------
// Pixel shader
varying		vec3 vNormal;
varying 	float vNormDist;
varying		vec3 vShadowPos0;
varying		vec3 vShadowPos1;
varying		vec3 vShadowPos2;

uniform		vec4 uColor;
uniform		vec3 uLightDir;
uniform sampler2D uShadowMap0;
uniform sampler2D uShadowMap1;
uniform sampler2D uShadowMap2;

float chebyshevUpperBound(float recvDist, vec2 moments) {
	if(recvDist <= moments.x+0.001)
		return 1.0;
	float variance = moments.y - moments.x*moments.x;
	variance = max(variance, 0.00002);
	
	float d = recvDist - moments.x;
	float p_max = variance/(variance+d*d);
	return p_max>0.8?p_max:0.0;
	//return 0.0;
}

void main (void) {
	vec3 ambient = vec3(0.2,0.2,0.25);
	vec3 normal = vNormal;//normalize(vNormal);
	float litIntensity = max(0.0, -dot(uLightDir, normal));
	vec3 color = uColor.xyz;
	if(vShadowPos0.x >= 0.0 && vShadowPos0.x <= 1.0
		&& vShadowPos0.y >= 0.0 && vShadowPos0.y <= 1.0
		&& vShadowPos0.z >= 0.0 && vShadowPos0.z <= 1.0)
	{
		float distFromLight = vShadowPos0.z;
		vec2 moments = texture2D(uShadowMap0, vShadowPos0.xy).rg;
		float casterDistance = moments.r;
		litIntensity *= chebyshevUpperBound(distFromLight, moments);

		color = vec3(1.0,0.0,0.0);
	}
	else if(vShadowPos1.x >= 0.0 && vShadowPos1.x <= 1.0
		&& vShadowPos1.y >= 0.0 && vShadowPos1.y <= 1.0
		&& vShadowPos1.z >= 0.0 && vShadowPos1.z <= 1.0)
	{
		float distFromLight = vShadowPos1.z;
		float casterDistance = texture(uShadowMap1, vShadowPos1.xy).r;
		if(distFromLight > casterDistance + 0.001) {
			litIntensity = 0.0;
		}
		
		color = vec3(0.0,1.0,0.0);
	}
	else if(vShadowPos2.x >= 0.0 && vShadowPos2.x <= 1.0
		&& vShadowPos2.y >= 0.0 && vShadowPos2.y <= 1.0
		&& vShadowPos2.z >= 0.0 && vShadowPos2.z <= 1.0)
	{
		float distFromLight = vShadowPos2.z;
		float casterDistance = texture(uShadowMap2, vShadowPos2.xy).r;
		if(distFromLight > casterDistance + 0.001) {
			litIntensity = 0.0;
		}
		
		color = vec3(0.0,0.0,1.0);
	}
	vec3 dif = vec3(0.95,0.95,0.95)*litIntensity;
	gl_FragColor = vec4(color*(dif+ambient), 1.0);
}
