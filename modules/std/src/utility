//----------------------------------------------------------------------------------------------------------------------
// Revolution SDK
// Created by Carmelo J. Fdez-Agüera Tortosa a.k.a. (Technik)
// On July 28th, 2012
//----------------------------------------------------------------------------------------------------------------------
// Standard library module's utility header

#ifndef _REV_STD_UTILITY_H_
#define _REV_STD_UTILITY_H_

#include <initializer_list>

namespace std
{
	// ----- Operators -----
	namespace rel_ops{
		template<class T_> bool operator !=	(const T_&, const T_&);
		template<class T_> bool operator >	(const T_&, const T_&);
		template<class T_> bool operator <=	(const T_&, const T_&);
		template<class T_> bool operator >=	(const T_&, const T_&);
	}	// namespace rel_ops

	template<class T_> void swap(T_& a, T_&b);
	template <class T_, size_t n_> void swap(T_ (&_a)[n_], T (&_b)[n_]);

	template <class T_> T_&& forward(typename remove_reference<T_>::type&);
	template <class T_> T_&& forward(typename remove_reference<T_>::type&&);
	template <class T_> typename remove_reference<T_>::type&& move(T_&&);

	//------------------------------------------------------------------------------------------------------------------
	// Inline implementations
	//------------------------------------------------------------------------------------------------------------------
	namespace rel_ops
	{
		//----------------------------------------------
		template<class T_>
		bool operator != (const T_& a, const T_& b)
		{
			return !(a == b);
		}

		//----------------------------------------------
		template<class T_>
		bool operator > (const T_& a, const T_& b)
		{
			return b < a;
		}

		//----------------------------------------------
		template<class T_>
		bool operator <= (const T_& a, const T_& b)
		{
			return !(b < a);
		}

		//----------------------------------------------
		template<class T_>
		bool operator >= (const T_& a, const T_& b)
		{
			return !(a < b);
		}
	}	// namespace rel_ops

	//--------------------------------------------------
	template<class T_>
	void swap(T_& a, T_& b)
	{
		T_ temp(move<T_>(a));
		a = move<T_>(b);
		b = move<T_>(temp);
	}

	//--------------------------------------------------
	template<class T_, size_t n_>
	void swap(T_ (a&)[n_], T_ (a&)[n_])
	{
		swap_range(a, n_, b);
	}
}	// namespace std

#endif // _REV_STD_UTILITY_H_
