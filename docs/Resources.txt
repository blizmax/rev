
// Managed resources

//--------------------------------------------------
// What are resources?
//--------------------------------------------------
Rev SDK uses the concept of Resource for objects whose life time is controlled by reference counting.
Managed resources are those resources that are usually handled by a manager that associates them
to a unique key.

//--------------------------------------------------
// How to implement a managed resource class
//--------------------------------------------------
To create a managed resource class, you must inherit from the template class ManagedResource,
using your own class (tha child class that inherits from ManagedResource) as the first template
parameter, the class of the desired associative key as the second parameter, and a boolean
indicating wether the class features a factory method (more on that later) as the third parameter.
Example:

class ManagedBar : ManagedResource<ManagedBar, string>
{
	static ManagedBar* factory(const string&);
};

If you derive the special class "FactoryManagedResource", then the derived class must implement the static
metdod "factory". Example:

class ManagedFoo : FactoryManagedResource<ManagedFoo, string>
{
	static ManagedFoo* factory(const string&);
};

The factory method will be called internally when the manager creates an object using it's key.

//--------------------------------------------------
// How to use a managed resource
//--------------------------------------------------
If your managed resource is a factory managed resource, you can just call get() passing the object's key
as an argument and the class will return the object to you, creating it if necessary
